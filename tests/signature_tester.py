import os
import cv2
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from core.signature_normalizer import SignatureNormalizer
from core.signature_features import SignatureFeaturesExtractor
from core.ocs_verifier import OCSVMVerifier
from core.signature_comparator import SignatureComparator
from utils.results_logger import ResultsLogger

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))

originals_path = os.path.join(BASE_DIR, "storage", "data", "CEDAR", "originals")
forgeries_path = os.path.join(BASE_DIR, "storage", "data", "CEDAR", "forgeries")

user_id = "5"

original_files = sorted([
    f for f in os.listdir(originals_path)
    if f.startswith(f"original_{user_id}_")
])

forgery_files = sorted([
    f for f in os.listdir(forgeries_path)
    if f.startswith(f"forgeries_{user_id}_")
])

# –ò—Å–ø–æ–ª—å–∑—É–µ–º 15 –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, 9 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è ‚Äî –Ω–∞ —Ç–µ—Å—Ç
train_files = original_files[:15]
test_originals = original_files[15:]  # –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
test_forgeries = forgery_files        # 24 –ø–æ–¥–¥–µ–ª–∫–∏

# –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
reference_images = []
for fname in train_files:
    img = cv2.imread(os.path.join(originals_path, fname), 0)
    norm = SignatureNormalizer(img).normalize()
    reference_images.append(norm)

# –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (C(10, 2) = 45)
comparator = SignatureComparator()
pairwise_vectors = []
for i in range(len(reference_images)):
    for j in range(i + 1, len(reference_images)):
        vec = comparator.compare(reference_images[i], reference_images[j])
        pairwise_vectors.append(vec)

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
verifier = OCSVMVerifier()
verifier.fit_on_pairs(pairwise_vectors)
verifier.save_model(user_id)

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
X_test = []
y_true = []
y_pred = []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö
for fname in test_originals:
    img = cv2.imread(os.path.join(originals_path, fname), 0)
    norm = SignatureNormalizer(img).normalize()
    result = verifier.verify_with_voting(norm, reference_images, comparator)
    y_pred.append(result)
    y_true.append(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ–ª–∫–∞—Ö
for fname in test_forgeries:
    img = cv2.imread(os.path.join(forgeries_path, fname), 0)
    norm = SignatureNormalizer(img).normalize()
    result = verifier.verify_with_voting(norm, reference_images, comparator)
    y_pred.append(result)
    y_true.append(-1)

# –ü–æ–¥—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫
acc = accuracy_score(y_true, y_pred)
prec = precision_score(y_true, y_pred, pos_label=1)
rec = recall_score(y_true, y_pred, pos_label=1)
f1 = f1_score(y_true, y_pred, pos_label=1)

tp = sum((np.array(y_pred) == 1) & (np.array(y_true) == 1))
fp = sum((np.array(y_pred) == 1) & (np.array(y_true) == -1))
fn = sum((np.array(y_pred) == -1) & (np.array(y_true) == 1))
tn = sum((np.array(y_pred) == -1) & (np.array(y_true) == -1))

# –í—ã–≤–æ–¥
print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ OC-SVM –¥–ª—è",user_id,"—á–µ–ª–æ–≤–µ–∫–∞")
print(f"‚úÖ Accuracy:  {acc:.4f}")
print(f"‚úÖ Precision: {prec:.4f}")
print(f"‚úÖ Recall:    {rec:.4f}")
print(f"‚úÖ F1-score:  {f1:.4f}")

print(f"\nüìå TP: {tp} | FP: {fp} | FN: {fn} | TN: {tn}")

# –õ–æ–≥–∏—Ä—É–µ–º
logger = ResultsLogger()
metrics = {
    "accuracy": acc,
    "precision": prec,
    "recall": rec,
    "f1_score": f1
}
conf_matrix = {
    "tp": tp,
    "fp": fp,
    "fn": fn,
    "tn": tn
}
logger.log(user_id, metrics, conf_matrix)
print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
